/*QUESTION 1.Write and execute a SQL query to list the school names, 
community names and average attendance for communities with a hardship index of 98.*/

SELECT CPS.NAME_OF_SCHOOL, CPS.COMMUNITY_AREA_NAME, CPS.AVERAGE_STUDENT_ATTENDANCE, 
CD.HARDSHIP_INDEX
FROM CHICAGO_PUBLIC_SCHOOLS CPS
INNER JOIN CENSUS_DATA CD 
ON CPS.COMMUNITY_AREA_NUMBER = CD.COMMUNITY_AREA_NUMBER 
WHERE CD.HARDSHIP_INDEX = 98;

/*QUESTION 2.Write and execute a SQL query to list all crimes that took place at a 
school. Include case number, crime type and community name.*/

SELECT CCD.LOCATION_DESCRIPTION, CCD.CASE_NUMBER, CCD.PRIMARY_TYPE, 
CD.COMMUNITY_AREA_NAME 
FROM CHICAGO_CRIME_DATA CCD 
INNER JOIN CENSUS_DATA CD 
ON CCD.COMMUNITY_AREA_NUMBER = CD.COMMUNITY_AREA_NUMBER
WHERE CCD.LOCATION_DESCRIPTION LIKE '%SCHOOL%';

/*Exercise 2: Creating a View
For privacy reasons, you have been asked to create a view that enables users to 
select just the school name and the icon fields from the CHICAGO_PUBLIC_SCHOOLS table.
By providing a view, you can ensure that users cannot see the actual scores given to
a school, just the icon associated with their score. You should define new names for
the view columns to obscure the use of scores and icons in the original table.*/

/*Question 1
Write and execute a SQL statement to create a view showing the columns listed in 
the following table, with new column names as shown in the second column.*/

CREATE OR REPLACE VIEW CPS (SCHOOL_NAME, SAFETY_RATING, FAMILY_RATING, 
ENVIRONMENT_RATING, INSTRUCTION_RATING, LEADERS_RATING, TEACHERS_RATING ) AS 
SELECT NAME_OF_SCHOOL, SAFETY_ICON, FAMILY_INVOLVEMENT_ICON, ENVIRONMENT_ICON, 
INSTRUCTION_ICON, LEADERS_ICON, TEACHERS_ICON 
FROM CHICAGO_PUBLIC_SCHOOLS;

/*Write and execute a SQL statement that returns all of the columns from the view.*/

SELECT * FROM CPS;

/*Write and execute a SQL statement that returns just the school name and 
leaders rating from the view.*/

SELECT SCHOOL_NAME, LEADERS_RATING FROM CPS;

/*Exercise 3: Creating a Stored Procedure
The icon fields are calculated based on the value in the corresponding score field. 
You need to make sure that when a score field is updated, the icon field is updated 
too. To do this, you will write a stored procedure that receives the school id and 
a leaders score as input parameters, calculates the icon setting and updates the 
fields appropriately.*/

/*Question 1.Write the structure of a query to create or replace a stored procedure 
called UPDATE_LEADERS_SCORE that takes a in_School_ID parameter as an integer and 
a in_Leader_Score parameter as an integer. 
Donâ€™t forget to use the #SET TERMINATOR statement to use the @ for the 
CREATE statement terminator.*/

--#SET TERMINATOR @
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE	-- NAME OF THIS STORED PROCEDURE ROUTING
(IN IN_SCHOOL_ID INTEGER, 
IN IN_LEADER_SCORE INTEGER)

LANGUAGE SQL                                       -- LANGUAGE USED IN THIS ROUTINE 
READS SQL DATA                                     -- THIS ROUTINE WILL ONLY READ DATA FROM THE TABLE 

DYNAMIC RESULT SETS 1                              -- MAXIMUM POSSIBLE NUMBER OF RESULT-SETS TO BE RETURNED TO THE CALLER QUERY 

BEGIN                                              -- 
	
	DECLARE C1 CURSOR                              -- CURSOR C1 WILL HANDLE THE RESULT SET BY RETRIEVING RECORDS ROW BY ROW FROM THE TABLE 
	WITH RETURN FOR                                -- THIS ROUTINE WILL RETURN RETRIEVED RECORDS AS A RESULT SET TO THE CALLER QUERY 

	SELECT * FROM CHICAGO_PUBLIC_SCHOOLS;          -- QUERY TO RETRIEVE ALL THE RECORDS FROM THE TABLE 
	
	OPEN C1;                                        -- KEEPING THE CURSOR C1 OPEN SO THAT RESULT SET CAN BE RETURNED TO THE CALLER QUERY 
END 
@                                                  -- ROUTINE TERMINATION CHARACTER

/*Question 2.Inside your stored procedure, write a SQL statement to update the 
Leaders_Score field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by 
in_School_ID to the value in the in_Leader_Score parameter.*/

--#SET TERMINATOR @ 
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE             -- NAME OF THIS STORED PROCEDURE ROUTINE 
(IN IN_SCHOOL_ID INTEGER, 
IN IN_LEADERS_SCORE INTEGER) 

LANGUAGE SQL                                       -- 
MODIFIES SQL DATA 

BEGIN 

UPDATE "CHICAGO_PUBLIC_SCHOOLS"
SET "LEADERS_SCORE" = IN_LEADERS_SCORE 
WHERE "SCHOOL_ID" = IN_SCHOOL_ID;

END
@

/*Question 3.Inside your stored procedure, write a SQL IF statement to update the Leaders_Icon field in 
the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID using the following information.*/

--#SET TERMINATOR @ 
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE(
IN IN_SCHOOL_ID INTEGER, 
IN IN_LEADER_SCORE INTEGER)

LANGUAGE SQL 
MODIFIES SQL DATA 

BEGIN 

	UPDATE CHICAGO_PUBLIC_SCHOOLS 
	
	SET "LEADERS_SCORE" = IN_LEADER_SCORE
	WHERE "SCHOOL_ID" = IN_SCHOOL_ID;
	
	IF IN_LEADER_SCORE > 0 AND IN_LEADER_SCORE < 20 THEN 
		UPDATE CHICAGO_PUBLIC_SCHOOLS 
		SET "LEADERS_ICON"='VERY WEAK';
		
	ELSEIF IN_LEADER_SCORE < 40 THEN 
		UPDATE CHICAGO_PUBLIC_SCHOOLS 
		SET "LEADERS_ICON" = 'WEAK';
		
	ELSEIF IN_LEADER_SCORE < 60 THEN 
		UPDATE CHICAGO_PUBLIC_SCHOOLS 
		SET "LEADERS_ICON" = 'AVERAGE';
		
	ELSEIF IN_LEADER_SCORE < 80 THEN 
		UPDATE CHICAGO_PUBLIC_SCHOOLS 
		SET "LEADERS_ICON" = 'STRONG';
		
	ELSEIF IN_LEADER_SCORE < 100 THEN 
		UPDATE CHICAGO_PUBLIC_SCHOOLS 
		SET "LEADERS_ICON" = 'VERY STRONG';
	END IF;
END 
@	

/*QUESTION4.RUN YOUR CODE TO CREATE THE STORED PROCEDURE
Write a query to call the stored procedure, passing a valid school ID and a leader score 
of 50, to check that the procedure works as expected.*/
--CALL UPDATE_LEADERS_SCORE()

/*Exercise 4: Using Transactions
You realise that if someone calls your code with a score outside of the allowed range (0-99), 
then the score will be updated with the invalid data and the icon will remain at its previous 
value. There are various ways to avoid this problem, one of which is using a transaction. 

Question 1
Update your stored procedure definition. Add a generic ELSE clause to the IF statement 
that rolls back the current work if the score did not fit any of the preceding categories.*/

/*Question 2
Update your stored procedure definition again. Add a statement to commit the current 
unit of work at the end of the procedure.*/

--#SET TERMINATOR @ 
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE(
IN IN_SCHOOL_ID INTEGER, 
IN IN_LEADER_SCORE INTEGER)

LANGUAGE SQL 
MODIFIES SQL DATA 

BEGIN 

	UPDATE CHICAGO_PUBLIC_SCHOOLS 
	
	SET "LEADERS_SCORE" = IN_LEADER_SCORE
	WHERE "SCHOOL_ID" = IN_SCHOOL_ID;
	
	IF IN_LEADER_SCORE > 0 AND IN_LEADER_SCORE < 20 THEN 
		UPDATE CHICAGO_PUBLIC_SCHOOLS 
		SET "LEADERS_ICON"='VERY WEAK';
		
	ELSEIF IN_LEADER_SCORE < 40 THEN 
		UPDATE CHICAGO_PUBLIC_SCHOOLS 
		SET "LEADERS_ICON" = 'WEAK';
		
	ELSEIF IN_LEADER_SCORE < 60 THEN 
		UPDATE CHICAGO_PUBLIC_SCHOOLS 
		SET "LEADERS_ICON" = 'AVERAGE';
		
	ELSEIF IN_LEADER_SCORE < 80 THEN 
		UPDATE CHICAGO_PUBLIC_SCHOOLS 
		SET "LEADERS_ICON" = 'STRONG';
		
	ELSEIF IN_LEADER_SCORE < 100 THEN 
		UPDATE CHICAGO_PUBLIC_SCHOOLS 
		SET "LEADERS_ICON" = 'VERY STRONG';
		
	ELSE 
		ROLLBACK WORK;
	END IF;
		COMMIT WORK;
END
@	

/*Write and run one query to check that the updated stored procedure works as expected 
when you use a valid score of 38*/

--CALL UPDATE_LEADERS_SCORE(610038,45);

/*Write and run another query to check that the updated stored procedure works as 
expected when you use an invalid score of 101.*/

CALL UPDATE_LEADERS_SCORE(610038,101)